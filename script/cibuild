#!/bin/bash

set -e

# ensure we're at project root
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}"  )" && pwd  )"
cd "$DIR/.."

GITHUB_REPO='https://api.github.com/repos/farmenvy/dotcom'

export STAGING_IP=$(/bin/bash ./script/determine-staging)
export CONSOLE_URL="$JENKINS_URL/job/$JOB_NAME/$BUILD_NUMBER/console"

title() {
  echo "---> $*"
}

info() {
  echo "+ $*"
}

set_github_status() {
  export RUN_STATUS=${1:-pending}
  local payload="{\"state\": \"$RUN_STATUS\", \"description\": \"Jenkins\", \"target_url\": \"$CONSOLE_URL\"}"

  if [ -n "$GITHUB_ACCESS_TOKEN" ]
  then
    info "setting github status to '$RUN_STATUS'"
    curl -sS "$GITHUB_REPO/statuses/$GIT_COMMIT?access_token=$GITHUB_ACCESS_TOKEN" \
      -H "Content-Type: application/json" \
      -X POST \
      -d "$payload" > /dev/null
  else
    info 'no github token -- skipping status notification'
  fi
}

cleanup() {
  info '*** performing cleanup ***'
  info 'pruning docker stuff'
  ci-compose stop
  ci-compose down
  docker system prune -f
  info '*** DONE ***'

  echo "=== $RUN_STATUS ==="
}

trap "cleanup" EXIT

abort() {
  RUN_STATUS=failure
  info "!!! FAILED: '$*'" >&2

  if [ "$DEPLOYABLE" == true ]; then
    ./script/slack-notify
  fi

  set_github_status 'failure'
  exit 1
}


step() {
  title "$*"
  eval "$*" || abort "$*"
  info "OK"
}

ci-compose() {
  docker-compose -f ci.yml "$@"
}

if [[ "$GIT_BRANCH" =~ .*/master$ ]];
then
  info 'Master branch received. Deployable.'
  DEPLOYABLE=true
else
  DEPLOYABLE=false
fi

set_github_status 'pending'

step ci-compose build
step ci-compose run --rm client ./node_modules/.bin/eslint ./src
step ci-compose run --rm api bin/setup
step ci-compose run --rm api rubocop .
step ci-compose run --rm api rspec spec

title 'deploy'
if [ "$DEPLOYABLE" == true ]
then
  info 'Deploying to staging...'
  info "adding $STAGING_IP as known host"
  step "ssh-keygen -R $STAGING_IP"
  step "ssh-keyscan $STAGING_IP >> ~/.ssh/known_hosts"

  info 'setting staging remote'
  step git remote remove staging &>/dev/null || true
  step git remote add staging "deploy@$STAGING_IP:farmenvy/dotcom.git"

  step git push --force staging HEAD:master

  step ./script/healthcheck "$STAGING_IP"
  step ./script/slack-notify 'success'
else
  info "Not a deployable branch."
fi

step set_github_status 'success'
